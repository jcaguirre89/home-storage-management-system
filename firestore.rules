rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user's data (including householdId)
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Default: Deny all access unless explicitly allowed.
    // Users must be authenticated for any operation.

    // Users collection:
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      // Allow user to create their own profile. householdId is NOT allowed at creation.
      allow create: if request.auth.uid == userId &&
                       request.resource.data.keys().hasOnly(['email', 'displayName', 'created', 'lastLogin']) &&
                       request.resource.data.email is string &&
                       request.resource.data.displayName is string;

      // Allow user to update their own profile.
      // email, created are immutable.
      // displayName, householdId are mutable. lastLogin can be updated to request.time.
      allow update: if request.auth.uid == userId &&
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.created == resource.data.created &&
                       request.resource.data.displayName is string &&
                       (request.resource.data.lastLogin == request.time || request.resource.data.lastLogin == resource.data.lastLogin) &&
                       // householdId can be string, null, or absent (if being removed or not touched).
                       ( ('householdId' in request.resource.data && (request.resource.data.householdId is string || request.resource.data.householdId == null) ) ||
                         !('householdId' in request.resource.data) // True if householdId key is not in the new data being written
                       ) &&
                       // Ensure no arbitrary fields are added & core fields are not removed.
                       request.resource.data.keys().hasOnly(['email', 'displayName', 'created', 'lastLogin', 'householdId']) &&
                       request.resource.data.keys().hasAll(['email', 'displayName', 'created', 'lastLogin']);
    }

    // Items collection:
    match /items/{itemId} {
      allow read: if request.auth != null &&
                       (resource.data.isPrivate == true && request.auth.uid == resource.data.creatorUserId) ||
                       (resource.data.isPrivate == false && getUserData(request.auth.uid).householdId == resource.data.householdId);

      allow create: if request.auth != null &&
                       request.resource.data.creatorUserId == request.auth.uid &&
                       request.resource.data.householdId == getUserData(request.auth.uid).householdId &&
                       request.resource.data.isPrivate is bool; // Ensure isPrivate is explicitly set

      allow update: if request.auth != null &&
                       // Check ownership/household membership
                       ((resource.data.isPrivate == true && request.auth.uid == resource.data.creatorUserId) ||
                        (resource.data.isPrivate == false && getUserData(request.auth.uid).householdId == resource.data.householdId)) &&
                       // Prevent changing critical fields like creator or household on update
                       request.resource.data.creatorUserId == resource.data.creatorUserId &&
                       request.resource.data.householdId == resource.data.householdId;

      allow delete: if request.auth != null &&
                       (resource.data.isPrivate == true && request.auth.uid == resource.data.creatorUserId) ||
                       (resource.data.isPrivate == false && getUserData(request.auth.uid).householdId == resource.data.householdId);
    }

    // Households collection (example rules):
    match /households/{householdId} {
      // Allow members to read their household document
      allow read: if request.auth != null && getUserData(request.auth.uid).householdId == householdId && resource.data.memberUserIds.hasAny([request.auth.uid]);
      // Allow authenticated user to create a household if they don't already belong to one.
      // The function will set ownerUserId and memberUserIds.
      allow create: if request.auth != null &&
                       getUserData(request.auth.uid).householdId == null &&
                       request.resource.data.ownerUserId == request.auth.uid &&
                       request.resource.data.memberUserIds.size() == 1 &&
                       request.resource.data.memberUserIds[0] == request.auth.uid &&
                       request.resource.data.name is string;
      // Allow owner to update the household name.
      // Managing members (add/remove) might need more specific rules or dedicated functions if complex.
      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.ownerUserId &&
                       request.resource.data.keys().hasOnly(['name', 'ownerUserId', 'memberUserIds', 'created']) && // Prevent changing owner/members arbitrarily here
                       request.resource.data.ownerUserId == resource.data.ownerUserId &&
                       request.resource.data.memberUserIds == resource.data.memberUserIds; // Simplistic: owner/members not changed by this rule
      // Deleting households might be restricted to owners and could have cascading effects (orphaned items if not handled)
      // allow delete: if request.auth != null && request.auth.uid == resource.data.ownerUserId;
    }
  }
}